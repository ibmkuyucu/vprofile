def slack_colors = [
    "SUCCESS": "good",
    "FAILURE": "danger",
]
pipeline {
    agent {
        label "linux_arm64"
    }
    tools {
        maven "Maven3"
        jdk "OpenJDK11"
    }

    environment {
        registry = "http://devtools:8082"
        docker_img = "vproappdock"
        registryCredential = 'nexushub'
        SONARSERVER = "SonarCloud"
        SONARSCANNER = "sonarscanner4"
    }

    stages {
    //     stage('Fetch Code') {
    //         steps {
    //             cleanWs()
    //             git branch: 'main', url: "https://github.com/ibmkuyucu/vprofile.git"
    //         }
    //     }
    //     stage('Build') {
    //         steps {
    //             sh 'mvn install -DskipTests'
    //         }
    //         post {
    //             success {
    //                 echo "Now Archiving."
    //                 archiveArtifacts artifacts: "**/*.war"
    //             }
    //         }
    //     }
    //     stage('Unit Test') {
    //         steps {
    //             sh "mvn test"
    //         }
    //     }
    //     stage('Integration Test') {
    //         steps {
    //             sh "mvn verify -DskipUnitTests"
    //         }
    //     }
    //     stage('Checkstyle Analysis') {
    //         steps {
    //             sh "mvn checkstyle:checkstyle"
    //         }
    //     }
    //     stage('Sonar Analysis') {
    //         tools {
    //             jdk "OpenJDK17"
    //         }
    //         environment {
    //             scannerHome = tool "${SONARSCANNER}"
    //         }
    //         steps {
    //             withSonarQubeEnv("${SONARSERVER}") {
    //                 sh '''${scannerHome}/bin/sonar-scanner \
    //                 -Dsonar.projectKey=deneme33 \
    //                 -Dsonar.organization=hprofile33 \
    //                 -Dsonar.projectVersion=1 \
    //                 -Dsonar.sources=src/ \
    //                 -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
    //                 -Dsonar.junit.reportsPath=target/surefire-reports/ \
    //                 -Dsonar.jacoco.reportsPath=target/jacoco.exec \
    //                 -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
    //             }
    //         }
    //     }
    //     stage('Quality Gate') {
    //       steps {
    //         timeout(time: 10, unit: 'MINUTES') {
    //            waitForQualityGate abortPipeline: true
    //         }
    //       }
    //     }
        stage('Fetch Dockerfile') {
            steps {
                cleanWs()
                git branch: 'ci-docker', url: "https://github.com/ibmkuyucu/vprofile.git"
            }
        }
        stage('Build and Deploy Docker Image on ARM64') {
            steps {
                script {
                    dockerImage = docker.build docker_img + ":$BUILD_NUMBER"
                    docker.withRegistry(registry, registryCredential ) {
                        dockerImage.push("$BUILD_NUMBER")
                        dockerImage.push('arm64')
                    }
                }
                sh "docker rmi -f $docker_img:$BUILD_NUMBER"
            }
        }
        stage('Build and Deploy Docker Image on AMD64') {
            agent {
                label "linux_amd64"
            }
            steps {
                script {
                    dockerImage = docker.build docker_img + ":$BUILD_NUMBER"
                    docker.withRegistry( registry, registryCredential ) {
                        dockerImage.push("$BUILD_NUMBER")
                        dockerImage.push('amd64')
                    }
                }
                sh "docker rmi -f $docker_img:$BUILD_NUMBER"
            }
        }
        stage('Build Docker Manifest and push') {
            steps {
                script {
                    docker.withRegistry( registry, registryCredential ) {
                        sh "docker manifest create ${docker_img}:latest ${docker_img}:amd64 ${docker_img}:arm64"
                        sh "docker manifest push ${docker_img}:latest"
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Slack Notifications."
            slackSend channel: "#jenkins",
            color: slack_colors[currentBuild.currentResult],
            message: "${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n For more info visit: ${env.BUILD_URL}"
        }
    }
}